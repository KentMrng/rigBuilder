<module name="convertSkinTool" type="Tools/ConvertSkinTool" muted="0" uid="c7568f79334f48238ef02aacbae45fbe">
<run><![CDATA[# The script moves joints and use current deformer to get skin weights for each joint.

import pymel.core as pm
import pymel.api as api
import maya.cmds as cmds

try:
    import ngSkinTools as ng
    ngSkinToolsAvailable = True
except ImportError:    
    ngSkinToolsAvailable = False

geo = pm.PyNode(@sourceGeo)
joints = [pm.PyNode(j) for j in @joints]

geoFn = api.MFnMesh(geo.__apimdagpath__())
origPoints = api.MPointArray()
geoFn.getPoints(origPoints, api.MSpace.kWorld)

skin = pm.mel.eval("findRelatedSkinCluster \"%s\""%@skinGeo)
if not skin:
    pm.error("Cannot find skinCluster on "+@skinGeo)

skin = pm.PyNode(skin)

if ngSkinToolsAvailable and @ngskin_layerName:
    ngmll = ng.mllInterface.MllInterface()
    ngmll.setCurrentMesh(@skinGeo)
    
    if ngmll.getLayersAvailable():
        print "Init ngSkinTools layers"
        ngmll.initLayers()    

for j in joints:
    print j
    old_t = j.t.get()
    
    j.ty.set(j.ty.get()+1)
    
    idx = skin.indexForInfluenceObject(j)
    
    points = api.MPointArray()
    geoFn.getPoints(points, api.MSpace.kWorld)
    
    beginProgress("Converting %s"%j, points.length(), 0.10)
    
    weights = [0.0] * points.length()    
    for i in range(points.length()):
        w = (origPoints[i] - points[i]).length()
        cmds.setAttr("%s.weightList[%d].weights[%d]"%(skin, i, idx), w)
        weights[i] = w
        stepProgress(i)
    
    if ngSkinToolsAvailable and @ngskin_layerName:
        getLayerIds = lambda layerName: [l[0] for l in ngmll.listLayers() if l[1] == layerName]
        layerIds = getLayerIds(@ngskin_layerName)
        layerId = layerIds[0] if layerIds else ngmll.createLayer(@ngskin_layerName)
        ngmll.setInfluenceWeights(layerId, idx, weights)
        
    endProgress()
    j.t.set(old_t)
]]></run>
<attributes>
<attr name="" template="label" category="General" connect=""><![CDATA[{"default": "text", "text": "<html>\n<b>sourceGeo</b> should be deformed by a some deformer.<br>\nThat defomer must be controlled by <b>joints</b><br>\n<b>skinGeo</b> must have <b>joints</b> as influences.\n</html>\n\n"}]]></attr>
<attr name="sourceGeo" template="lineEditAndButton" category="General" connect=""><![CDATA[{"default": "value", "buttonCommand": "import maya.cmds as cmds\nls = cmds.ls(sl=True)\nif ls: value = ls[0]", "buttonLabel": "<", "value": "head_geo"}]]></attr>
<attr name="skinGeo" template="lineEditAndButton" category="General" connect=""><![CDATA[{"default": "value", "buttonCommand": "import maya.cmds as cmds\nls = cmds.ls(sl=True)\nif ls: value = ls[0]", "buttonLabel": "<", "value": "head_geo"}]]></attr>
<attr name="joints" template="listBox" category="General" connect=""><![CDATA[{"default": "items", "items": ["L_eyelid_upper_1_joint", "L_eyelid_upper_2_joint"]}]]></attr>
<attr name="ngskin_layerName" template="lineEdit" category="General" connect=""><![CDATA[{"default": "value", "max": "", "validator": 0, "value": "eyelids", "min": ""}]]></attr>
</attributes>
<children>
</children>
</module>