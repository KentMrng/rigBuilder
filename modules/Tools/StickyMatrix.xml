<module name="stickyMatrix" type="Tools/StickyMatrix" muted="0" uid="7f6411df01bc434fa784bbb6817d9b79">
<run><![CDATA[import pymel.core as pm
import skeleposerEditor

name = @name + "_sticky"

stickyAttr = pm.PyNode(@stickyAttr)

joint1 = pm.PyNode(@joint1)
joint2 = pm.PyNode(@joint2)

stickyMatrix = pm.createNode("stickyMatrix", n=name+"_stickyMatrix")
stickyAttr >> stickyMatrix.sticky
stickyMatrix.blendAt.set(@blendAt)

for i, j in enumerate([joint1, joint2]):
    for a in ["t", "r", "s"]:
        inputs = j.attr(a).inputs(p=True)
        if inputs:
            inputs[0] >> stickyMatrix.attr(a+str(i+1))
            pm.disconnectAttr(inputs[0], j.attr(a))
        else:
            for k, ch_a in enumerate(["x", "y", "z"]):
                ch_a_inputs = j.attr(a+ch_a).inputs(p=True)
                if ch_a_inputs:
                    ch_a_inputs[0] >> stickyMatrix.attr(a+str(i+1)).children()[k]
                    pm.disconnectAttr(ch_a_inputs[0], j.attr(a+ch_a))
                else:
                    stickyMatrix.attr(a+str(i+1)).children()[k].set(j.attr(a+ch_a).get())                                        

joint1.jo >> stickyMatrix.jo1
joint1.pm >> stickyMatrix.p1
joint2.jo >> stickyMatrix.jo2
joint2.pm >> stickyMatrix.p2

# offsets
stickyAttr.set(1)
offset1 = pm.createNode("transform", n=name+"_joint1_transform")
offset2 = pm.createNode("transform", n=name+"_joint2_transform")
joMat1 = joint1.getOrientation().asMatrix()
joMat2 = joint2.getOrientation().asMatrix()

om1 = stickyMatrix.om1.get()
om2 = stickyMatrix.om2.get()

tm1 = om1 * joint1.pm.get()
tm2 = om2 * joint2.pm.get()

wm1 = om1 * joMat1 * joint1.pm.get()
wm2 = om2 * joMat2 * joint2.pm.get()

wm1.a30 = tm1.a30
wm1.a31 = tm1.a31
wm1.a32 = tm1.a32

wm2.a30 = tm2.a30
wm2.a31 = tm2.a31
wm2.a32 = tm2.a32

m1 = joint1.worldMatrix.get() * wm1.inverse()
m2 = joint2.worldMatrix.get() * wm2.inverse()
stickyAttr.set(0)

offset1.setMatrix(m1)
offset2.setMatrix(m2)

offset1.m >> stickyMatrix.o1
offset2.m >> stickyMatrix.o2
# outputs

decompose1 = pm.createNode("decomposeMatrix", n=name+"_joint1_decomposeMatrix")
decompose2 = pm.createNode("decomposeMatrix", n=name+"_joint2_decomposeMatrix")
stickyMatrix.om1 >> decompose1.inputMatrix
stickyMatrix.om2 >> decompose2.inputMatrix

decompose1.outputTranslate >> joint1.t
decompose1.outputRotate >> joint1.r
decompose1.outputScale >> joint1.s

decompose2.outputTranslate >> joint2.t
decompose2.outputRotate >> joint2.r
decompose2.outputScale >> joint2.s

]]></run>
<attributes>
<attr name="name" template="lineEdit" category="General" connect=""><![CDATA[{"default": "value", "max": "", "validator": 0, "value": "test", "min": ""}]]></attr>
<attr name="joint1" template="lineEditAndButton" category="General" connect=""><![CDATA[{"default": "value", "buttonCommand": "import maya.cmds as cmds\nls = cmds.ls(sl=True)\nif ls: value = ls[0]", "buttonLabel": "<", "value": "upper"}]]></attr>
<attr name="joint2" template="lineEditAndButton" category="General" connect=""><![CDATA[{"default": "value", "buttonCommand": "import maya.cmds as cmds\nls = cmds.ls(sl=True)\nif ls: value = ls[0]", "buttonLabel": "<", "value": "lower"}]]></attr>
<attr name="stickyAttr" template="lineEditAndButton" category="General" connect=""><![CDATA[{"default": "value", "buttonCommand": "import maya.cmds as cmds\nls = cmds.ls(sl=True)\nif ls: value = ls[0]", "buttonLabel": "<", "value": "null1.sticky"}]]></attr>
<attr name="blendAt" template="lineEdit" category="General" connect=""><![CDATA[{"default": "value", "max": "1", "validator": 2, "value": 0.5, "min": "0"}]]></attr>
</attributes>
<children>
</children>
</module>